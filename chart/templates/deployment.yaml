apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "opa.fullname" . }}
  labels:
  {{- include "opa.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "opa.labels" . | nindent 8 }}
  {{- with .Values.deploymentStrategy }}
  strategy:
  {{- toYaml . | nindent 4 }}
  {{- end }}
  template:
    metadata:
      annotations:
        {{- if .Values.opa.config }}
        checksum/config: {{ tpl (toYaml .Values.opa.config) . | sha256sum }}
        {{- end }}
        checksum/webhookconfiguration: {{ include (print $.Template.BasePath "/webhookconfiguration.yaml" ) . | sha256sum }}
{{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
{{- end }}
      labels:
        {{- include "opa.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      name: {{ template "opa.fullname" . }}
    spec:
{{- if .Values.imagePullSecrets }}
      imagePullSecrets:
      {{- range .Values.imagePullSecrets }}
        - name: {{ . }}
      {{- end }}
{{- end }}
{{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName }}
{{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
{{- if or .Values.opa.authz.enabled .Values.opa.bootstrapPolicies}}
      initContainers:
        - name: initpolicy
          image: {{ include "opa.mgmt.image" . }}
          imagePullPolicy: {{ .Values.mgmt.image.pullPolicy }}
          resources:
{{ toYaml .Values.mgmt.resources | indent 12 }}
          command:
          - /bin/sh
          - -c
          - |
{{- if .Values.opa.authz.enabled }}
{{- if .Values.opa.authz.mgmtToken}}
            cat /mgmt-token-secret/mgmt-token > /bootstrap/mgmt-token
{{- else }}
            tr -dc 'A-F0-9' < /dev/urandom | dd bs=1 count=32 2>/dev/null > /bootstrap/mgmt-token
{{- end }}
            TOKEN=`cat /bootstrap/mgmt-token`
            cat > /bootstrap/authz.rego <<EOF
            package system.authz
            import rego.v1
            default allow := false
            # Allow anonymous access to the default policy decision.
            allow if { input.path = [""]; input.method == "POST" }
            allow if { input.path = [""]; input.method == "GET" }
            # This is only used for health check in liveness and readiness probe
            allow if { input.path = ["health"]; input.method == "GET" }
            allow if { input.identity == "$TOKEN" }
            EOF
{{- end }}
{{- range $policyName, $policy := .Values.opa.bootstrapPolicies }}
            cat > /bootstrap/{{ $policyName }}.rego <<EOF
{{ $policy | indent 12 }}
            EOF
{{- end }}
          volumeMounts:
            - name: bootstrap
              mountPath: /bootstrap
{{- if .Values.opa.authz.mgmtToken}}
            - name: mgmt-token-secret
              mountPath: /mgmt-token-secret
              readOnly: true
{{- end }}
{{- end }}
      {{- include "opa.dnsPolicy" . | nindent 6 -}}
      containers:
        - name: opa
          ports:
          - name: opa
            containerPort: {{ .Values.service.port }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          env:
{{- if .Values.env }}
{{ toYaml .Values.env | indent 12 }}
{{- end }}
          - name: KUBERNETES_API_TOKEN
            valueFrom:
              secretKeyRef:
                name: {{ template "opa.serviceAccountName" .}}-kubernetes-api
                key: token
          resources:
{{ toYaml .Values.resources | indent 12 }}
          args:
            - "run"
            - "--server"
            {{- if .Values.opa.config }}
            - "--config-file=/config/config.yaml"
            {{- end }}
            {{- if .Values.useHttps }}
            - "--tls-cert-file=/certs/tls.crt"
            - "--tls-private-key-file=/certs/tls.key"
            {{- end }}
            - "--addr=0.0.0.0:{{ .Values.service.port }}"
            - "--log-level={{ .Values.logLevel }}"
            - "--log-format={{ .Values.logFormat }}"
            {{- if .Values.opa.authz.enabled }}
            - "--authentication=token"
            - "--authorization=basic"
            - "--ignore=.*"
            {{- end }}
            {{- if or .Values.opa.authz.enabled .Values.opa.bootstrapPolicies }}
            - "/bootstrap"
            {{- end }}
            {{- range .Values.opa.extraArgs }}
            - {{ . }}
            {{- end }}
          volumeMounts:
            {{- if .Values.useHttps }}
            - name: certs
              readOnly: true
              mountPath: /certs
            {{- end }}
            {{- if .Values.opa.config }}
            - name: config
              readOnly: true
              mountPath: /config
            {{- end }}
{{- if or .Values.opa.authz.enabled .Values.opa.bootstrapPolicies }}
            - name: bootstrap
              readOnly: true
              mountPath: /bootstrap
{{- end }}
{{- if .Values.volumeMounts }}
{{ toYaml .Values.volumeMounts | indent 12}}
{{- end }}
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
{{- if .Values.mgmt.enabled }}
        - name: mgmt
          image: {{ include "opa.mgmt.image" . }}
          imagePullPolicy: {{ .Values.mgmt.image.pullPolicy }}
          startupProbe:
{{ toYaml .Values.mgmt.startupProbe | nindent 12 }}
          env:
{{- if .Values.mgmt.env }}
{{ toYaml .Values.mgmt.env | indent 12 }}
{{- end }}
          resources:
            {{ toYaml .Values.mgmt.resources | nindent 12 }}
          args:
            {{- if .Values.opa.authz.enabled }}
            - --opa-auth-token-file=/bootstrap/mgmt-token
            {{- end }}
            - --opa-url={{ .Values.useHttps | ternary "https" "http" }}://127.0.0.1:{{ .Values.service.port }}/v1
            - --opa-allow-insecure
            - "--namespaces={{ coalesce .Values.mgmt.namespaces (list .Release.Namespace) | join "," }}"
            - "--enable-data={{ .Values.mgmt.data.enabled }}"
            - "--enable-policies={{ .Values.mgmt.policies.enabled }}"

            - "--replicate-path={{ .Values.mgmt.replicate.path }}"
            {{- range .Values.mgmt.replicate.namespace }}
            - "--replicate={{ . }}"
            {{- end }}
            {{- range .Values.mgmt.replicate.cluster }}
            - "--replicate-cluster={{ . }}"
            {{- end }}
            {{- if .Values.mgmt.replicate.ignoreNs }}
            - "--replicate-ignore-namespaces={{ .Values.mgmt.replicate.ignoreNs | join "," }}"
            {{- else }}
            - "--replicate-ignore-namespaces="
            {{- end }}
            {{- range .Values.mgmt.extraArgs }}
            - {{ . }}
            {{- end }}
{{- if or .Values.opa.authz.enabled .Values.opa.bootstrapPolicies }}
          volumeMounts:
            - name: bootstrap
              readOnly: true
              mountPath: /bootstrap
{{- end }}
{{- end }}
{{- if .Values.extraContainers }}
{{ toYaml .Values.extraContainers | indent 8}}
{{- end }}
      {{- if .Values.securityContext.enabled }}
      securityContext:
        {{- range $key, $val := .Values.securityContext }}
        {{- if ne $key "enabled" }}
        {{ $key }}: {{ toYaml $val | nindent 10 }}
        {{- end }}
        {{- end }}
      {{- end }}
      serviceAccountName: {{ template "opa.serviceAccountName" .}}
      volumes:
        {{- if .Values.useHttps }}
        - name: certs
          secret:
            secretName: {{ template "opa.fullname" . }}-cert
        {{- end }}
        {{- if .Values.opa.config }}
        - name: config
          secret:
            secretName: {{ template "opa.fullname" . }}-config
        {{- end }}
{{- if or .Values.opa.authz.enabled .Values.opa.bootstrapPolicies}}
        - name: bootstrap
          emptyDir: {}
{{- if .Values.opa.authz.mgmtToken}}
        - name: mgmt-token-secret
          secret:
            secretName: {{.Values.opa.authz.mgmtToken.secretName}}
            items:
              - key: {{ .Values.opa.authz.mgmtToken.secretKey | default "mgmtToken" }}
                path: mgmt-token
{{- end }}
{{- end }}
{{- if .Values.volumes }}
{{ toYaml .Values.volumes | indent 8}}
{{- end }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
      tolerations:
{{ toYaml .Values.tolerations | indent 8 }}
